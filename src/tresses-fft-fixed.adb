with Tresses.DSP;
with Tresses.Resources;

--  This Fixed point FFT package is based on the AVR-FFT implementation by
--  Klafyvel:
--   - https://klafyvel.me/blog/articles/fft-arduino/
--   - https://klafyvel.me/blog/articles/fft-julia/
--
--  There are many unusual aspects in this implementation compared to most FFT
--  implementations you can find. Some of which make the result "approximate".
--  I will list a few that are important to read and understand the code:
--
--  1) Trigonometry is highly optimised, introducing some inacuracies. See:
--  klafyvel.me/blog/articles/fft-arduino/#trigonometry_can_be_blazingly_fast
--
--  2) The output of the FFT fits in the input buffer. Most of the time FFT
--  implementation will require a work buffer that is twice as big as the
--  input, to fit both a real and an imaginary components for each element.
--  In the end you get bin values for positive and negative frequencies.
--  When the input signal is real, the negative frequency bins are just a
--  mirror of the positive frequency bins. Klafyvel is using this property
--  to only compute the postive frequency bins, which means we can
--  do the computation in-place without using extra space. See:
--  klafyvel.me/blog/articles/fft-julia/#the_special_case_of_a_real_signal
--
--  3) The amplitude (modulus) calculation is also heavily optimized using
--  aproximation. See: klafyvel.me/blog/articles/approximate-euclidian-norm/
--
--  Klafyvel's original goal was to achieve the fastest possible FFT on an
--  arduino. As a result there are computing and memory space constraints
--  that are not applicable for this library that we intend to run on 32bits
--  microcontrollers:
--
--  1) For the index bit reversal we use a lookup table rather then computing
--  the reversal every time. This is a boost in performance at the cost of
--  increased data size (1024 * 2 bytes in read-only/flash memory).
--
--  2) In the original code, multiplications by 0.5 are sometimes used to
--  divide a value by two. We guess that on an 8bit AVR the division by 2
--  (right shift by one) is slower than a fixed point multiplication for
--  16bits integers. This is not the case for us, so we just divide by 2.
--
--  3) We apply a Hanning window before the FFT computation.

package body Tresses.FFT.Fixed is

   FIXED_ONE         : constant S16 := S16'Last;
   FIXED_ZERO        : constant S16 := 16#0000#;
   MODULUS_MAGIC     : constant S16 := 16#0347#;
   ONE_OVER_SQRT_TWO : constant S16 := 16#5a82#;

   Sines : constant array (Natural range <>) of S16 :=
     (0  => 0,      -- sin(-Pi)
      1  => -32768, -- sin(-Pi/2)
      2  => -23170, -- sin(-Pi/4)
      3  => -12540, -- sin(-Pi/8)
      4  => -6393,  -- sin(-Pi/16)
      5  => -3212,  -- sin(-Pi/32)
      6  => -1608,  -- sin(-Pi/64)
      7  => -804,   -- sin(-Pi/128)
      8  => -402,   -- sin(-Pi/256)
      9  => -201,   -- sin(-Pi/512)
      10 => -85     -- sin(-Pi/1024)
     );

   Two_Sines_SQ : constant array (Natural range <>) of S16 :=
     (0  => 32767, -- 2sin^2(-Pi/2)
      1  => 32767, -- 2sin^2(-Pi/4)
      2  => 9598,  -- 2sin^2(-Pi/8)
      3  => 2494,  -- 2sin^2(-Pi/16)
      4  => 631,   -- 2sin^2(-Pi/32)
      5  => 158,   -- 2sin^2(-Pi/64)
      6  => 40,    -- 2sin^2(-Pi/128)
      7  => 10,    -- 2sin^2(-Pi/256)
      8  => 2,     -- 2sin^2(-Pi/512)
      9  => 1,     -- 2sin^2(-Pi/1024)
      10 => 0      -- 2sin^2(-Pi/2048)
     );

   function Mul (A, B : S16) return S16
   is (S16 ((S32 (A) * S32 (B) / 2**15)));

   function Add_Sat (A, B : S16) return S16
   is (S16 (DSP.Clip_S16 (S32 (A) + S32 (B))));

   function Sub_Sat (A, B : S16) return S16
   is (S16 (DSP.Clip_S16 (S32 (A) - S32 (B))));

   ------------------
   -- Apply_Window --
   ------------------

   procedure Apply_Window (Input : in out Mono_Buffer; Window : Mono_Buffer)
   is
      WI : Natural := Window'First;
   begin
      for Elt of Input loop
         Elt := S16 ((S32 (Elt) * S32 (Window (WI))) / 2**15);
         WI := WI + 1;
      end loop;
   end Apply_Window;

   ------------------------
   -- Bitrev_Index_First --
   ------------------------

   function Bitrev_Index_First (FFT_Size : Natural) return Natural
   is (case FFT_Size is
          when 2048 => 0,
          when 1024 => 1,
          when 512 => 3,
          when 256 => 7,
          when 128 => 15,
          when 64 => 31,
          when 32 => 63,
          when 16 => 127,
          when others => raise Program_Error with "Invalid FFT Size");

   -----------------------
   -- Bitrev_Index_Step --
   -----------------------

   function Bitrev_Index_Step (FFT_Size : Natural) return Natural
   is (case FFT_Size is
          when 2048 => 1,
          when 1024 => 2,
          when 512 => 4,
          when 256 => 8,
          when 128 => 16,
          when 64 => 32,
          when 32 => 64,
          when 16 => 128,
          when 8 => 256,
          when 4 => 512,
          when 2 => 1024,
          when others => raise Program_Error with "Invalid FFT Size");

   pragma Style_Checks ("M120");
   Bitrev_Table : constant array (Natural range 0 .. 1023) of Natural :=
     (
      16#200#, 16#100#, 16#300#, 16#080#, 16#280#, 16#180#, 16#380#, 16#040#, 16#240#, 16#140#,
      16#340#, 16#0C0#, 16#2C0#, 16#1C0#, 16#3C0#, 16#020#, 16#220#, 16#120#, 16#320#, 16#0A0#,
      16#2A0#, 16#1A0#, 16#3A0#, 16#060#, 16#260#, 16#160#, 16#360#, 16#0E0#, 16#2E0#, 16#1E0#,
      16#3E0#, 16#010#, 16#210#, 16#110#, 16#310#, 16#090#, 16#290#, 16#190#, 16#390#, 16#050#,
      16#250#, 16#150#, 16#350#, 16#0D0#, 16#2D0#, 16#1D0#, 16#3D0#, 16#030#, 16#230#, 16#130#,
      16#330#, 16#0B0#, 16#2B0#, 16#1B0#, 16#3B0#, 16#070#, 16#270#, 16#170#, 16#370#, 16#0F0#,
      16#2F0#, 16#1F0#, 16#3F0#, 16#008#, 16#208#, 16#108#, 16#308#, 16#088#, 16#288#, 16#188#,
      16#388#, 16#048#, 16#248#, 16#148#, 16#348#, 16#0C8#, 16#2C8#, 16#1C8#, 16#3C8#, 16#028#,
      16#228#, 16#128#, 16#328#, 16#0A8#, 16#2A8#, 16#1A8#, 16#3A8#, 16#068#, 16#268#, 16#168#,
      16#368#, 16#0E8#, 16#2E8#, 16#1E8#, 16#3E8#, 16#018#, 16#218#, 16#118#, 16#318#, 16#098#,
      16#298#, 16#198#, 16#398#, 16#058#, 16#258#, 16#158#, 16#358#, 16#0D8#, 16#2D8#, 16#1D8#,
      16#3D8#, 16#038#, 16#238#, 16#138#, 16#338#, 16#0B8#, 16#2B8#, 16#1B8#, 16#3B8#, 16#078#,
      16#278#, 16#178#, 16#378#, 16#0F8#, 16#2F8#, 16#1F8#, 16#3F8#, 16#004#, 16#204#, 16#104#,
      16#304#, 16#084#, 16#284#, 16#184#, 16#384#, 16#044#, 16#244#, 16#144#, 16#344#, 16#0C4#,
      16#2C4#, 16#1C4#, 16#3C4#, 16#024#, 16#224#, 16#124#, 16#324#, 16#0A4#, 16#2A4#, 16#1A4#,
      16#3A4#, 16#064#, 16#264#, 16#164#, 16#364#, 16#0E4#, 16#2E4#, 16#1E4#, 16#3E4#, 16#014#,
      16#214#, 16#114#, 16#314#, 16#094#, 16#294#, 16#194#, 16#394#, 16#054#, 16#254#, 16#154#,
      16#354#, 16#0D4#, 16#2D4#, 16#1D4#, 16#3D4#, 16#034#, 16#234#, 16#134#, 16#334#, 16#0B4#,
      16#2B4#, 16#1B4#, 16#3B4#, 16#074#, 16#274#, 16#174#, 16#374#, 16#0F4#, 16#2F4#, 16#1F4#,
      16#3F4#, 16#00C#, 16#20C#, 16#10C#, 16#30C#, 16#08C#, 16#28C#, 16#18C#, 16#38C#, 16#04C#,
      16#24C#, 16#14C#, 16#34C#, 16#0CC#, 16#2CC#, 16#1CC#, 16#3CC#, 16#02C#, 16#22C#, 16#12C#,
      16#32C#, 16#0AC#, 16#2AC#, 16#1AC#, 16#3AC#, 16#06C#, 16#26C#, 16#16C#, 16#36C#, 16#0EC#,
      16#2EC#, 16#1EC#, 16#3EC#, 16#01C#, 16#21C#, 16#11C#, 16#31C#, 16#09C#, 16#29C#, 16#19C#,
      16#39C#, 16#05C#, 16#25C#, 16#15C#, 16#35C#, 16#0DC#, 16#2DC#, 16#1DC#, 16#3DC#, 16#03C#,
      16#23C#, 16#13C#, 16#33C#, 16#0BC#, 16#2BC#, 16#1BC#, 16#3BC#, 16#07C#, 16#27C#, 16#17C#,
      16#37C#, 16#0FC#, 16#2FC#, 16#1FC#, 16#3FC#, 16#002#, 16#202#, 16#102#, 16#302#, 16#082#,
      16#282#, 16#182#, 16#382#, 16#042#, 16#242#, 16#142#, 16#342#, 16#0C2#, 16#2C2#, 16#1C2#,
      16#3C2#, 16#022#, 16#222#, 16#122#, 16#322#, 16#0A2#, 16#2A2#, 16#1A2#, 16#3A2#, 16#062#,
      16#262#, 16#162#, 16#362#, 16#0E2#, 16#2E2#, 16#1E2#, 16#3E2#, 16#012#, 16#212#, 16#112#,
      16#312#, 16#092#, 16#292#, 16#192#, 16#392#, 16#052#, 16#252#, 16#152#, 16#352#, 16#0D2#,
      16#2D2#, 16#1D2#, 16#3D2#, 16#032#, 16#232#, 16#132#, 16#332#, 16#0B2#, 16#2B2#, 16#1B2#,
      16#3B2#, 16#072#, 16#272#, 16#172#, 16#372#, 16#0F2#, 16#2F2#, 16#1F2#, 16#3F2#, 16#00A#,
      16#20A#, 16#10A#, 16#30A#, 16#08A#, 16#28A#, 16#18A#, 16#38A#, 16#04A#, 16#24A#, 16#14A#,
      16#34A#, 16#0CA#, 16#2CA#, 16#1CA#, 16#3CA#, 16#02A#, 16#22A#, 16#12A#, 16#32A#, 16#0AA#,
      16#2AA#, 16#1AA#, 16#3AA#, 16#06A#, 16#26A#, 16#16A#, 16#36A#, 16#0EA#, 16#2EA#, 16#1EA#,
      16#3EA#, 16#01A#, 16#21A#, 16#11A#, 16#31A#, 16#09A#, 16#29A#, 16#19A#, 16#39A#, 16#05A#,
      16#25A#, 16#15A#, 16#35A#, 16#0DA#, 16#2DA#, 16#1DA#, 16#3DA#, 16#03A#, 16#23A#, 16#13A#,
      16#33A#, 16#0BA#, 16#2BA#, 16#1BA#, 16#3BA#, 16#07A#, 16#27A#, 16#17A#, 16#37A#, 16#0FA#,
      16#2FA#, 16#1FA#, 16#3FA#, 16#006#, 16#206#, 16#106#, 16#306#, 16#086#, 16#286#, 16#186#,
      16#386#, 16#046#, 16#246#, 16#146#, 16#346#, 16#0C6#, 16#2C6#, 16#1C6#, 16#3C6#, 16#026#,
      16#226#, 16#126#, 16#326#, 16#0A6#, 16#2A6#, 16#1A6#, 16#3A6#, 16#066#, 16#266#, 16#166#,
      16#366#, 16#0E6#, 16#2E6#, 16#1E6#, 16#3E6#, 16#016#, 16#216#, 16#116#, 16#316#, 16#096#,
      16#296#, 16#196#, 16#396#, 16#056#, 16#256#, 16#156#, 16#356#, 16#0D6#, 16#2D6#, 16#1D6#,
      16#3D6#, 16#036#, 16#236#, 16#136#, 16#336#, 16#0B6#, 16#2B6#, 16#1B6#, 16#3B6#, 16#076#,
      16#276#, 16#176#, 16#376#, 16#0F6#, 16#2F6#, 16#1F6#, 16#3F6#, 16#00E#, 16#20E#, 16#10E#,
      16#30E#, 16#08E#, 16#28E#, 16#18E#, 16#38E#, 16#04E#, 16#24E#, 16#14E#, 16#34E#, 16#0CE#,
      16#2CE#, 16#1CE#, 16#3CE#, 16#02E#, 16#22E#, 16#12E#, 16#32E#, 16#0AE#, 16#2AE#, 16#1AE#,
      16#3AE#, 16#06E#, 16#26E#, 16#16E#, 16#36E#, 16#0EE#, 16#2EE#, 16#1EE#, 16#3EE#, 16#01E#,
      16#21E#, 16#11E#, 16#31E#, 16#09E#, 16#29E#, 16#19E#, 16#39E#, 16#05E#, 16#25E#, 16#15E#,
      16#35E#, 16#0DE#, 16#2DE#, 16#1DE#, 16#3DE#, 16#03E#, 16#23E#, 16#13E#, 16#33E#, 16#0BE#,
      16#2BE#, 16#1BE#, 16#3BE#, 16#07E#, 16#27E#, 16#17E#, 16#37E#, 16#0FE#, 16#2FE#, 16#1FE#,
      16#3FE#, 16#001#, 16#201#, 16#101#, 16#301#, 16#081#, 16#281#, 16#181#, 16#381#, 16#041#,
      16#241#, 16#141#, 16#341#, 16#0C1#, 16#2C1#, 16#1C1#, 16#3C1#, 16#021#, 16#221#, 16#121#,
      16#321#, 16#0A1#, 16#2A1#, 16#1A1#, 16#3A1#, 16#061#, 16#261#, 16#161#, 16#361#, 16#0E1#,
      16#2E1#, 16#1E1#, 16#3E1#, 16#011#, 16#211#, 16#111#, 16#311#, 16#091#, 16#291#, 16#191#,
      16#391#, 16#051#, 16#251#, 16#151#, 16#351#, 16#0D1#, 16#2D1#, 16#1D1#, 16#3D1#, 16#031#,
      16#231#, 16#131#, 16#331#, 16#0B1#, 16#2B1#, 16#1B1#, 16#3B1#, 16#071#, 16#271#, 16#171#,
      16#371#, 16#0F1#, 16#2F1#, 16#1F1#, 16#3F1#, 16#009#, 16#209#, 16#109#, 16#309#, 16#089#,
      16#289#, 16#189#, 16#389#, 16#049#, 16#249#, 16#149#, 16#349#, 16#0C9#, 16#2C9#, 16#1C9#,
      16#3C9#, 16#029#, 16#229#, 16#129#, 16#329#, 16#0A9#, 16#2A9#, 16#1A9#, 16#3A9#, 16#069#,
      16#269#, 16#169#, 16#369#, 16#0E9#, 16#2E9#, 16#1E9#, 16#3E9#, 16#019#, 16#219#, 16#119#,
      16#319#, 16#099#, 16#299#, 16#199#, 16#399#, 16#059#, 16#259#, 16#159#, 16#359#, 16#0D9#,
      16#2D9#, 16#1D9#, 16#3D9#, 16#039#, 16#239#, 16#139#, 16#339#, 16#0B9#, 16#2B9#, 16#1B9#,
      16#3B9#, 16#079#, 16#279#, 16#179#, 16#379#, 16#0F9#, 16#2F9#, 16#1F9#, 16#3F9#, 16#005#,
      16#205#, 16#105#, 16#305#, 16#085#, 16#285#, 16#185#, 16#385#, 16#045#, 16#245#, 16#145#,
      16#345#, 16#0C5#, 16#2C5#, 16#1C5#, 16#3C5#, 16#025#, 16#225#, 16#125#, 16#325#, 16#0A5#,
      16#2A5#, 16#1A5#, 16#3A5#, 16#065#, 16#265#, 16#165#, 16#365#, 16#0E5#, 16#2E5#, 16#1E5#,
      16#3E5#, 16#015#, 16#215#, 16#115#, 16#315#, 16#095#, 16#295#, 16#195#, 16#395#, 16#055#,
      16#255#, 16#155#, 16#355#, 16#0D5#, 16#2D5#, 16#1D5#, 16#3D5#, 16#035#, 16#235#, 16#135#,
      16#335#, 16#0B5#, 16#2B5#, 16#1B5#, 16#3B5#, 16#075#, 16#275#, 16#175#, 16#375#, 16#0F5#,
      16#2F5#, 16#1F5#, 16#3F5#, 16#00D#, 16#20D#, 16#10D#, 16#30D#, 16#08D#, 16#28D#, 16#18D#,
      16#38D#, 16#04D#, 16#24D#, 16#14D#, 16#34D#, 16#0CD#, 16#2CD#, 16#1CD#, 16#3CD#, 16#02D#,
      16#22D#, 16#12D#, 16#32D#, 16#0AD#, 16#2AD#, 16#1AD#, 16#3AD#, 16#06D#, 16#26D#, 16#16D#,
      16#36D#, 16#0ED#, 16#2ED#, 16#1ED#, 16#3ED#, 16#01D#, 16#21D#, 16#11D#, 16#31D#, 16#09D#,
      16#29D#, 16#19D#, 16#39D#, 16#05D#, 16#25D#, 16#15D#, 16#35D#, 16#0DD#, 16#2DD#, 16#1DD#,
      16#3DD#, 16#03D#, 16#23D#, 16#13D#, 16#33D#, 16#0BD#, 16#2BD#, 16#1BD#, 16#3BD#, 16#07D#,
      16#27D#, 16#17D#, 16#37D#, 16#0FD#, 16#2FD#, 16#1FD#, 16#3FD#, 16#003#, 16#203#, 16#103#,
      16#303#, 16#083#, 16#283#, 16#183#, 16#383#, 16#043#, 16#243#, 16#143#, 16#343#, 16#0C3#,
      16#2C3#, 16#1C3#, 16#3C3#, 16#023#, 16#223#, 16#123#, 16#323#, 16#0A3#, 16#2A3#, 16#1A3#,
      16#3A3#, 16#063#, 16#263#, 16#163#, 16#363#, 16#0E3#, 16#2E3#, 16#1E3#, 16#3E3#, 16#013#,
      16#213#, 16#113#, 16#313#, 16#093#, 16#293#, 16#193#, 16#393#, 16#053#, 16#253#, 16#153#,
      16#353#, 16#0D3#, 16#2D3#, 16#1D3#, 16#3D3#, 16#033#, 16#233#, 16#133#, 16#333#, 16#0B3#,
      16#2B3#, 16#1B3#, 16#3B3#, 16#073#, 16#273#, 16#173#, 16#373#, 16#0F3#, 16#2F3#, 16#1F3#,
      16#3F3#, 16#00B#, 16#20B#, 16#10B#, 16#30B#, 16#08B#, 16#28B#, 16#18B#, 16#38B#, 16#04B#,
      16#24B#, 16#14B#, 16#34B#, 16#0CB#, 16#2CB#, 16#1CB#, 16#3CB#, 16#02B#, 16#22B#, 16#12B#,
      16#32B#, 16#0AB#, 16#2AB#, 16#1AB#, 16#3AB#, 16#06B#, 16#26B#, 16#16B#, 16#36B#, 16#0EB#,
      16#2EB#, 16#1EB#, 16#3EB#, 16#01B#, 16#21B#, 16#11B#, 16#31B#, 16#09B#, 16#29B#, 16#19B#,
      16#39B#, 16#05B#, 16#25B#, 16#15B#, 16#35B#, 16#0DB#, 16#2DB#, 16#1DB#, 16#3DB#, 16#03B#,
      16#23B#, 16#13B#, 16#33B#, 16#0BB#, 16#2BB#, 16#1BB#, 16#3BB#, 16#07B#, 16#27B#, 16#17B#,
      16#37B#, 16#0FB#, 16#2FB#, 16#1FB#, 16#3FB#, 16#007#, 16#207#, 16#107#, 16#307#, 16#087#,
      16#287#, 16#187#, 16#387#, 16#047#, 16#247#, 16#147#, 16#347#, 16#0C7#, 16#2C7#, 16#1C7#,
      16#3C7#, 16#027#, 16#227#, 16#127#, 16#327#, 16#0A7#, 16#2A7#, 16#1A7#, 16#3A7#, 16#067#,
      16#267#, 16#167#, 16#367#, 16#0E7#, 16#2E7#, 16#1E7#, 16#3E7#, 16#017#, 16#217#, 16#117#,
      16#317#, 16#097#, 16#297#, 16#197#, 16#397#, 16#057#, 16#257#, 16#157#, 16#357#, 16#0D7#,
      16#2D7#, 16#1D7#, 16#3D7#, 16#037#, 16#237#, 16#137#, 16#337#, 16#0B7#, 16#2B7#, 16#1B7#,
      16#3B7#, 16#077#, 16#277#, 16#177#, 16#377#, 16#0F7#, 16#2F7#, 16#1F7#, 16#3F7#, 16#00F#,
      16#20F#, 16#10F#, 16#30F#, 16#08F#, 16#28F#, 16#18F#, 16#38F#, 16#04F#, 16#24F#, 16#14F#,
      16#34F#, 16#0CF#, 16#2CF#, 16#1CF#, 16#3CF#, 16#02F#, 16#22F#, 16#12F#, 16#32F#, 16#0AF#,
      16#2AF#, 16#1AF#, 16#3AF#, 16#06F#, 16#26F#, 16#16F#, 16#36F#, 16#0EF#, 16#2EF#, 16#1EF#,
      16#3EF#, 16#01F#, 16#21F#, 16#11F#, 16#31F#, 16#09F#, 16#29F#, 16#19F#, 16#39F#, 16#05F#,
      16#25F#, 16#15F#, 16#35F#, 16#0DF#, 16#2DF#, 16#1DF#, 16#3DF#, 16#03F#, 16#23F#, 16#13F#,
      16#33F#, 16#0BF#, 16#2BF#, 16#1BF#, 16#3BF#, 16#07F#, 16#27F#, 16#17F#, 16#37F#, 16#0FF#,
      16#2FF#, 16#1FF#, 16#3FF#, 16#001#);

   Window_Hanning_2048 : constant Mono_Buffer :=
     (0, 0, 0, 0, 1, 1, 2, 3, 4, 6,
      7, 9, 11, 13, 15, 17, 19, 22, 24, 27,
      30, 33, 37, 40, 44, 48, 52, 56, 60, 64,
      69, 74, 78, 83, 89, 94, 99, 105, 111, 117,
      123, 129, 135, 142, 149, 155, 162, 170, 177, 184,
      192, 200, 208, 216, 224, 232, 241, 249, 258, 267,
      276, 286, 295, 305, 314, 324, 334, 344, 355, 365,
      376, 387, 398, 409, 420, 431, 443, 455, 466, 478,
      490, 503, 515, 528, 541, 553, 566, 580, 593, 606,
      620, 634, 648, 662, 676, 690, 705, 720, 734, 749,
      765, 780, 795, 811, 826, 842, 858, 874, 891, 907,
      924, 940, 957, 974, 991, 1009, 1026, 1044, 1061, 1079,
      1097, 1115, 1134, 1152, 1171, 1190, 1208, 1227, 1247, 1266,
      1285, 1305, 1325, 1345, 1365, 1385, 1405, 1425, 1446, 1467,
      1488, 1509, 1530, 1551, 1572, 1594, 1616, 1638, 1660, 1682,
      1704, 1726, 1749, 1772, 1794, 1817, 1840, 1864, 1887, 1910,
      1934, 1958, 1982, 2006, 2030, 2054, 2079, 2103, 2128, 2153,
      2178, 2203, 2228, 2253, 2279, 2305, 2330, 2356, 2382, 2409,
      2435, 2461, 2488, 2515, 2541, 2568, 2595, 2623, 2650, 2677,
      2705, 2733, 2761, 2789, 2817, 2845, 2873, 2902, 2930, 2959,
      2988, 3017, 3046, 3075, 3105, 3134, 3164, 3194, 3224, 3254,
      3284, 3314, 3344, 3375, 3406, 3436, 3467, 3498, 3529, 3560,
      3592, 3623, 3655, 3687, 3718, 3750, 3782, 3815, 3847, 3879,
      3912, 3944, 3977, 4010, 4043, 4076, 4110, 4143, 4176, 4210,
      4244, 4277, 4311, 4345, 4380, 4414, 4448, 4483, 4517, 4552,
      4587, 4622, 4657, 4692, 4727, 4763, 4798, 4834, 4869, 4905,
      4941, 4977, 5013, 5050, 5086, 5122, 5159, 5196, 5232, 5269,
      5306, 5343, 5381, 5418, 5455, 5493, 5530, 5568, 5606, 5644,
      5682, 5720, 5758, 5796, 5835, 5873, 5912, 5951, 5989, 6028,
      6067, 6106, 6146, 6185, 6224, 6264, 6303, 6343, 6383, 6423,
      6463, 6503, 6543, 6583, 6623, 6664, 6704, 6745, 6786, 6826,
      6867, 6908, 6949, 6990, 7032, 7073, 7114, 7156, 7197, 7239,
      7281, 7323, 7365, 7407, 7449, 7491, 7533, 7575, 7618, 7660,
      7703, 7746, 7788, 7831, 7874, 7917, 7960, 8003, 8047, 8090,
      8133, 8177, 8220, 8264, 8308, 8351, 8395, 8439, 8483, 8527,
      8571, 8616, 8660, 8704, 8749, 8793, 8838, 8882, 8927, 8972,
      9017, 9062, 9107, 9152, 9197, 9242, 9287, 9333, 9378, 9424,
      9469, 9515, 9560, 9606, 9652, 9698, 9744, 9790, 9836, 9882,
      9928, 9974, 10021, 10067, 10113, 10160, 10206, 10253, 10300, 10346,
      10393, 10440, 10487, 10534, 10581, 10628, 10675, 10722, 10769, 10816,
      10864, 10911, 10958, 11006, 11053, 11101, 11148, 11196, 11244, 11292,
      11339, 11387, 11435, 11483, 11531, 11579, 11627, 11675, 11723, 11772,
      11820, 11868, 11917, 11965, 12013, 12062, 12110, 12159, 12207, 12256,
      12305, 12353, 12402, 12451, 12500, 12549, 12597, 12646, 12695, 12744,
      12793, 12842, 12892, 12941, 12990, 13039, 13088, 13137, 13187, 13236,
      13285, 13335, 13384, 13434, 13483, 13533, 13582, 13632, 13681, 13731,
      13780, 13830, 13880, 13929, 13979, 14029, 14079, 14128, 14178, 14228,
      14278, 14328, 14377, 14427, 14477, 14527, 14577, 14627, 14677, 14727,
      14777, 14827, 14877, 14927, 14977, 15027, 15078, 15128, 15178, 15228,
      15278, 15328, 15378, 15429, 15479, 15529, 15579, 15629, 15680, 15730,
      15780, 15830, 15880, 15931, 15981, 16031, 16081, 16132, 16182, 16232,
      16282, 16333, 16383, 16433, 16484, 16534, 16584, 16634, 16685, 16735,
      16785, 16835, 16886, 16936, 16986, 17036, 17086, 17137, 17187, 17237,
      17287, 17337, 17388, 17438, 17488, 17538, 17588, 17638, 17688, 17739,
      17789, 17839, 17889, 17939, 17989, 18039, 18089, 18139, 18189, 18239,
      18289, 18339, 18389, 18438, 18488, 18538, 18588, 18638, 18687, 18737,
      18787, 18837, 18886, 18936, 18986, 19035, 19085, 19134, 19184, 19233,
      19283, 19332, 19382, 19431, 19481, 19530, 19579, 19629, 19678, 19727,
      19776, 19825, 19874, 19924, 19973, 20022, 20071, 20120, 20169, 20217,
      20266, 20315, 20364, 20413, 20461, 20510, 20559, 20607, 20656, 20704,
      20753, 20801, 20849, 20898, 20946, 20994, 21043, 21091, 21139, 21187,
      21235, 21283, 21331, 21379, 21427, 21474, 21522, 21570, 21618, 21665,
      21713, 21760, 21808, 21855, 21902, 21950, 21997, 22044, 22091, 22138,
      22185, 22232, 22279, 22326, 22373, 22420, 22466, 22513, 22560, 22606,
      22653, 22699, 22745, 22792, 22838, 22884, 22930, 22976, 23022, 23068,
      23114, 23160, 23206, 23251, 23297, 23342, 23388, 23433, 23479, 23524,
      23569, 23614, 23659, 23704, 23749, 23794, 23839, 23884, 23928, 23973,
      24017, 24062, 24106, 24150, 24195, 24239, 24283, 24327, 24371, 24415,
      24458, 24502, 24546, 24589, 24633, 24676, 24719, 24763, 24806, 24849,
      24892, 24935, 24978, 25020, 25063, 25106, 25148, 25191, 25233, 25275,
      25317, 25359, 25401, 25443, 25485, 25527, 25569, 25610, 25652, 25693,
      25734, 25776, 25817, 25858, 25899, 25940, 25980, 26021, 26062, 26102,
      26143, 26183, 26223, 26263, 26303, 26343, 26383, 26423, 26463, 26502,
      26542, 26581, 26620, 26660, 26699, 26738, 26777, 26815, 26854, 26893,
      26931, 26970, 27008, 27046, 27084, 27122, 27160, 27198, 27236, 27273,
      27311, 27348, 27385, 27423, 27460, 27497, 27534, 27570, 27607, 27644,
      27680, 27716, 27753, 27789, 27825, 27861, 27897, 27932, 27968, 28003,
      28039, 28074, 28109, 28144, 28179, 28214, 28249, 28283, 28318, 28352,
      28386, 28421, 28455, 28489, 28522, 28556, 28590, 28623, 28656, 28690,
      28723, 28756, 28789, 28822, 28854, 28887, 28919, 28951, 28984, 29016,
      29048, 29079, 29111, 29143, 29174, 29206, 29237, 29268, 29299, 29330,
      29360, 29391, 29422, 29452, 29482, 29512, 29542, 29572, 29602, 29632,
      29661, 29691, 29720, 29749, 29778, 29807, 29836, 29864, 29893, 29921,
      29949, 29977, 30005, 30033, 30061, 30089, 30116, 30143, 30171, 30198,
      30225, 30251, 30278, 30305, 30331, 30357, 30384, 30410, 30436, 30461,
      30487, 30513, 30538, 30563, 30588, 30613, 30638, 30663, 30687, 30712,
      30736, 30760, 30784, 30808, 30832, 30856, 30879, 30902, 30926, 30949,
      30972, 30994, 31017, 31040, 31062, 31084, 31106, 31128, 31150, 31172,
      31194, 31215, 31236, 31257, 31278, 31299, 31320, 31341, 31361, 31381,
      31401, 31421, 31441, 31461, 31481, 31500, 31519, 31539, 31558, 31576,
      31595, 31614, 31632, 31651, 31669, 31687, 31705, 31722, 31740, 31757,
      31775, 31792, 31809, 31826, 31842, 31859, 31875, 31892, 31908, 31924,
      31940, 31955, 31971, 31986, 32001, 32017, 32032, 32046, 32061, 32076,
      32090, 32104, 32118, 32132, 32146, 32160, 32173, 32186, 32200, 32213,
      32225, 32238, 32251, 32263, 32276, 32288, 32300, 32311, 32323, 32335,
      32346, 32357, 32368, 32379, 32390, 32401, 32411, 32422, 32432, 32442,
      32452, 32461, 32471, 32480, 32490, 32499, 32508, 32517, 32525, 32534,
      32542, 32550, 32558, 32566, 32574, 32582, 32589, 32596, 32604, 32611,
      32617, 32624, 32631, 32637, 32643, 32649, 32655, 32661, 32667, 32672,
      32677, 32683, 32688, 32692, 32697, 32702, 32706, 32710, 32714, 32718,
      32722, 32726, 32729, 32733, 32736, 32739, 32742, 32744, 32747, 32749,
      32751, 32753, 32755, 32757, 32759, 32760, 32762, 32763, 32764, 32765,
      32765, 32766, 32766, 32766, 32767, 32766, 32766, 32766, 32765, 32765,
      32764, 32763, 32762, 32760, 32759, 32757, 32755, 32753, 32751, 32749,
      32747, 32744, 32742, 32739, 32736, 32733, 32729, 32726, 32722, 32718,
      32714, 32710, 32706, 32702, 32697, 32692, 32688, 32683, 32677, 32672,
      32667, 32661, 32655, 32649, 32643, 32637, 32631, 32624, 32617, 32611,
      32604, 32596, 32589, 32582, 32574, 32566, 32558, 32550, 32542, 32534,
      32525, 32517, 32508, 32499, 32490, 32480, 32471, 32461, 32452, 32442,
      32432, 32422, 32411, 32401, 32390, 32379, 32368, 32357, 32346, 32335,
      32323, 32311, 32300, 32288, 32276, 32263, 32251, 32238, 32225, 32213,
      32200, 32186, 32173, 32160, 32146, 32132, 32118, 32104, 32090, 32076,
      32061, 32046, 32032, 32017, 32001, 31986, 31971, 31955, 31940, 31924,
      31908, 31892, 31875, 31859, 31842, 31826, 31809, 31792, 31775, 31757,
      31740, 31722, 31705, 31687, 31669, 31651, 31632, 31614, 31595, 31576,
      31558, 31539, 31519, 31500, 31481, 31461, 31441, 31421, 31401, 31381,
      31361, 31341, 31320, 31299, 31278, 31257, 31236, 31215, 31194, 31172,
      31150, 31128, 31106, 31084, 31062, 31040, 31017, 30994, 30972, 30949,
      30926, 30902, 30879, 30856, 30832, 30808, 30784, 30760, 30736, 30712,
      30687, 30663, 30638, 30613, 30588, 30563, 30538, 30513, 30487, 30461,
      30436, 30410, 30384, 30357, 30331, 30305, 30278, 30251, 30225, 30198,
      30171, 30143, 30116, 30089, 30061, 30033, 30005, 29977, 29949, 29921,
      29893, 29864, 29836, 29807, 29778, 29749, 29720, 29691, 29661, 29632,
      29602, 29572, 29542, 29512, 29482, 29452, 29422, 29391, 29360, 29330,
      29299, 29268, 29237, 29206, 29174, 29143, 29111, 29079, 29048, 29016,
      28984, 28951, 28919, 28887, 28854, 28822, 28789, 28756, 28723, 28690,
      28656, 28623, 28590, 28556, 28522, 28489, 28455, 28421, 28386, 28352,
      28318, 28283, 28249, 28214, 28179, 28144, 28109, 28074, 28039, 28003,
      27968, 27932, 27897, 27861, 27825, 27789, 27753, 27716, 27680, 27644,
      27607, 27570, 27534, 27497, 27460, 27423, 27385, 27348, 27311, 27273,
      27236, 27198, 27160, 27122, 27084, 27046, 27008, 26970, 26931, 26893,
      26854, 26815, 26777, 26738, 26699, 26660, 26620, 26581, 26542, 26502,
      26463, 26423, 26383, 26343, 26303, 26263, 26223, 26183, 26143, 26102,
      26062, 26021, 25980, 25940, 25899, 25858, 25817, 25776, 25734, 25693,
      25652, 25610, 25569, 25527, 25485, 25443, 25401, 25359, 25317, 25275,
      25233, 25191, 25148, 25106, 25063, 25020, 24978, 24935, 24892, 24849,
      24806, 24763, 24719, 24676, 24633, 24589, 24546, 24502, 24458, 24415,
      24371, 24327, 24283, 24239, 24195, 24150, 24106, 24062, 24017, 23973,
      23928, 23884, 23839, 23794, 23749, 23704, 23659, 23614, 23569, 23524,
      23479, 23433, 23388, 23342, 23297, 23251, 23206, 23160, 23114, 23068,
      23022, 22976, 22930, 22884, 22838, 22792, 22745, 22699, 22653, 22606,
      22560, 22513, 22466, 22420, 22373, 22326, 22279, 22232, 22185, 22138,
      22091, 22044, 21997, 21950, 21902, 21855, 21808, 21760, 21713, 21665,
      21618, 21570, 21522, 21474, 21427, 21379, 21331, 21283, 21235, 21187,
      21139, 21091, 21043, 20994, 20946, 20898, 20849, 20801, 20753, 20704,
      20656, 20607, 20559, 20510, 20461, 20413, 20364, 20315, 20266, 20217,
      20169, 20120, 20071, 20022, 19973, 19924, 19874, 19825, 19776, 19727,
      19678, 19629, 19579, 19530, 19481, 19431, 19382, 19332, 19283, 19233,
      19184, 19134, 19085, 19035, 18986, 18936, 18886, 18837, 18787, 18737,
      18687, 18638, 18588, 18538, 18488, 18438, 18389, 18339, 18289, 18239,
      18189, 18139, 18089, 18039, 17989, 17939, 17889, 17839, 17789, 17739,
      17688, 17638, 17588, 17538, 17488, 17438, 17388, 17337, 17287, 17237,
      17187, 17137, 17086, 17036, 16986, 16936, 16886, 16835, 16785, 16735,
      16685, 16634, 16584, 16534, 16484, 16433, 16383, 16333, 16282, 16232,
      16182, 16132, 16081, 16031, 15981, 15931, 15880, 15830, 15780, 15730,
      15680, 15629, 15579, 15529, 15479, 15429, 15378, 15328, 15278, 15228,
      15178, 15128, 15078, 15027, 14977, 14927, 14877, 14827, 14777, 14727,
      14677, 14627, 14577, 14527, 14477, 14427, 14377, 14328, 14278, 14228,
      14178, 14128, 14079, 14029, 13979, 13929, 13880, 13830, 13780, 13731,
      13681, 13632, 13582, 13533, 13483, 13434, 13384, 13335, 13285, 13236,
      13187, 13137, 13088, 13039, 12990, 12941, 12892, 12842, 12793, 12744,
      12695, 12646, 12597, 12549, 12500, 12451, 12402, 12353, 12305, 12256,
      12207, 12159, 12110, 12062, 12013, 11965, 11917, 11868, 11820, 11772,
      11723, 11675, 11627, 11579, 11531, 11483, 11435, 11387, 11339, 11292,
      11244, 11196, 11148, 11101, 11053, 11006, 10958, 10911, 10864, 10816,
      10769, 10722, 10675, 10628, 10581, 10534, 10487, 10440, 10393, 10346,
      10300, 10253, 10206, 10160, 10113, 10067, 10021, 9974, 9928, 9882,
      9836, 9790, 9744, 9698, 9652, 9606, 9560, 9515, 9469, 9424,
      9378, 9333, 9287, 9242, 9197, 9152, 9107, 9062, 9017, 8972,
      8927, 8882, 8838, 8793, 8749, 8704, 8660, 8616, 8571, 8527,
      8483, 8439, 8395, 8351, 8308, 8264, 8220, 8177, 8133, 8090,
      8047, 8003, 7960, 7917, 7874, 7831, 7788, 7746, 7703, 7660,
      7618, 7575, 7533, 7491, 7449, 7407, 7365, 7323, 7281, 7239,
      7197, 7156, 7114, 7073, 7032, 6990, 6949, 6908, 6867, 6826,
      6786, 6745, 6704, 6664, 6623, 6583, 6543, 6503, 6463, 6423,
      6383, 6343, 6303, 6264, 6224, 6185, 6146, 6106, 6067, 6028,
      5989, 5951, 5912, 5873, 5835, 5796, 5758, 5720, 5682, 5644,
      5606, 5568, 5530, 5493, 5455, 5418, 5381, 5343, 5306, 5269,
      5232, 5196, 5159, 5122, 5086, 5050, 5013, 4977, 4941, 4905,
      4869, 4834, 4798, 4763, 4727, 4692, 4657, 4622, 4587, 4552,
      4517, 4483, 4448, 4414, 4380, 4345, 4311, 4277, 4244, 4210,
      4176, 4143, 4110, 4076, 4043, 4010, 3977, 3944, 3912, 3879,
      3847, 3815, 3782, 3750, 3718, 3687, 3655, 3623, 3592, 3560,
      3529, 3498, 3467, 3436, 3406, 3375, 3344, 3314, 3284, 3254,
      3224, 3194, 3164, 3134, 3105, 3075, 3046, 3017, 2988, 2959,
      2930, 2902, 2873, 2845, 2817, 2789, 2761, 2733, 2705, 2677,
      2650, 2623, 2595, 2568, 2541, 2515, 2488, 2461, 2435, 2409,
      2382, 2356, 2330, 2305, 2279, 2253, 2228, 2203, 2178, 2153,
      2128, 2103, 2079, 2054, 2030, 2006, 1982, 1958, 1934, 1910,
      1887, 1864, 1840, 1817, 1794, 1772, 1749, 1726, 1704, 1682,
      1660, 1638, 1616, 1594, 1572, 1551, 1530, 1509, 1488, 1467,
      1446, 1425, 1405, 1385, 1365, 1345, 1325, 1305, 1285, 1266,
      1247, 1227, 1208, 1190, 1171, 1152, 1134, 1115, 1097, 1079,
      1061, 1044, 1026, 1009, 991, 974, 957, 940, 924, 907,
      891, 874, 858, 842, 826, 811, 795, 780, 765, 749,
      734, 720, 705, 690, 676, 662, 648, 634, 620, 606,
      593, 580, 566, 553, 541, 528, 515, 503, 490, 478,
      466, 455, 443, 431, 420, 409, 398, 387, 376, 365,
      355, 344, 334, 324, 314, 305, 295, 286, 276, 267,
      258, 249, 241, 232, 224, 216, 208, 200, 192, 184,
      177, 170, 162, 155, 149, 142, 135, 129, 123, 117,
      111, 105, 99, 94, 89, 83, 78, 74, 69, 64,
      60, 56, 52, 48, 44, 40, 37, 33, 30, 27,
      24, 22, 19, 17, 15, 13, 11, 9, 7, 6,
      4, 3, 2, 1, 1, 0, 0, 0);

   Window_Hanning_1024 : constant Mono_Buffer :=
     (0, 0, 1, 2, 4, 7, 11, 15, 19, 24,
      30, 37, 44, 52, 60, 69, 78, 89, 99, 111,
      123, 135, 149, 162, 177, 192, 208, 224, 241, 258,
      276, 295, 314, 334, 355, 376, 398, 420, 443, 466,
      490, 515, 541, 566, 593, 620, 648, 676, 705, 734,
      765, 795, 826, 858, 891, 924, 957, 991, 1026, 1061,
      1097, 1134, 1171, 1208, 1247, 1285, 1325, 1365, 1405, 1446,
      1488, 1530, 1572, 1616, 1660, 1704, 1749, 1794, 1840, 1887,
      1934, 1982, 2030, 2079, 2128, 2178, 2228, 2279, 2330, 2382,
      2435, 2488, 2541, 2595, 2650, 2705, 2761, 2817, 2873, 2930,
      2988, 3046, 3105, 3164, 3224, 3284, 3344, 3406, 3467, 3529,
      3592, 3655, 3718, 3782, 3847, 3912, 3977, 4043, 4110, 4176,
      4244, 4311, 4380, 4448, 4517, 4587, 4657, 4727, 4798, 4869,
      4941, 5013, 5086, 5159, 5232, 5306, 5381, 5455, 5530, 5606,
      5682, 5758, 5835, 5912, 5989, 6067, 6146, 6224, 6303, 6383,
      6463, 6543, 6623, 6704, 6786, 6867, 6949, 7032, 7114, 7197,
      7281, 7365, 7449, 7533, 7618, 7703, 7788, 7874, 7960, 8047,
      8133, 8220, 8308, 8395, 8483, 8571, 8660, 8749, 8838, 8927,
      9017, 9107, 9197, 9287, 9378, 9469, 9560, 9652, 9744, 9836,
      9928, 10021, 10113, 10206, 10300, 10393, 10487, 10581, 10675, 10769,
      10864, 10958, 11053, 11148, 11244, 11339, 11435, 11531, 11627, 11723,
      11820, 11917, 12013, 12110, 12207, 12305, 12402, 12500, 12597, 12695,
      12793, 12892, 12990, 13088, 13187, 13285, 13384, 13483, 13582, 13681,
      13780, 13880, 13979, 14079, 14178, 14278, 14377, 14477, 14577, 14677,
      14777, 14877, 14977, 15078, 15178, 15278, 15378, 15479, 15579, 15680,
      15780, 15880, 15981, 16081, 16182, 16282, 16383, 16484, 16584, 16685,
      16785, 16886, 16986, 17086, 17187, 17287, 17388, 17488, 17588, 17688,
      17789, 17889, 17989, 18089, 18189, 18289, 18389, 18488, 18588, 18687,
      18787, 18886, 18986, 19085, 19184, 19283, 19382, 19481, 19579, 19678,
      19776, 19874, 19973, 20071, 20169, 20266, 20364, 20461, 20559, 20656,
      20753, 20849, 20946, 21043, 21139, 21235, 21331, 21427, 21522, 21618,
      21713, 21808, 21902, 21997, 22091, 22185, 22279, 22373, 22466, 22560,
      22653, 22745, 22838, 22930, 23022, 23114, 23206, 23297, 23388, 23479,
      23569, 23659, 23749, 23839, 23928, 24017, 24106, 24195, 24283, 24371,
      24458, 24546, 24633, 24719, 24806, 24892, 24978, 25063, 25148, 25233,
      25317, 25401, 25485, 25569, 25652, 25734, 25817, 25899, 25980, 26062,
      26143, 26223, 26303, 26383, 26463, 26542, 26620, 26699, 26777, 26854,
      26931, 27008, 27084, 27160, 27236, 27311, 27385, 27460, 27534, 27607,
      27680, 27753, 27825, 27897, 27968, 28039, 28109, 28179, 28249, 28318,
      28386, 28455, 28522, 28590, 28656, 28723, 28789, 28854, 28919, 28984,
      29048, 29111, 29174, 29237, 29299, 29360, 29422, 29482, 29542, 29602,
      29661, 29720, 29778, 29836, 29893, 29949, 30005, 30061, 30116, 30171,
      30225, 30278, 30331, 30384, 30436, 30487, 30538, 30588, 30638, 30687,
      30736, 30784, 30832, 30879, 30926, 30972, 31017, 31062, 31106, 31150,
      31194, 31236, 31278, 31320, 31361, 31401, 31441, 31481, 31519, 31558,
      31595, 31632, 31669, 31705, 31740, 31775, 31809, 31842, 31875, 31908,
      31940, 31971, 32001, 32032, 32061, 32090, 32118, 32146, 32173, 32200,
      32225, 32251, 32276, 32300, 32323, 32346, 32368, 32390, 32411, 32432,
      32452, 32471, 32490, 32508, 32525, 32542, 32558, 32574, 32589, 32604,
      32617, 32631, 32643, 32655, 32667, 32677, 32688, 32697, 32706, 32714,
      32722, 32729, 32736, 32742, 32747, 32751, 32755, 32759, 32762, 32764,
      32765, 32766, 32767, 32766, 32765, 32764, 32762, 32759, 32755, 32751,
      32747, 32742, 32736, 32729, 32722, 32714, 32706, 32697, 32688, 32677,
      32667, 32655, 32643, 32631, 32617, 32604, 32589, 32574, 32558, 32542,
      32525, 32508, 32490, 32471, 32452, 32432, 32411, 32390, 32368, 32346,
      32323, 32300, 32276, 32251, 32225, 32200, 32173, 32146, 32118, 32090,
      32061, 32032, 32001, 31971, 31940, 31908, 31875, 31842, 31809, 31775,
      31740, 31705, 31669, 31632, 31595, 31558, 31519, 31481, 31441, 31401,
      31361, 31320, 31278, 31236, 31194, 31150, 31106, 31062, 31017, 30972,
      30926, 30879, 30832, 30784, 30736, 30687, 30638, 30588, 30538, 30487,
      30436, 30384, 30331, 30278, 30225, 30171, 30116, 30061, 30005, 29949,
      29893, 29836, 29778, 29720, 29661, 29602, 29542, 29482, 29422, 29360,
      29299, 29237, 29174, 29111, 29048, 28984, 28919, 28854, 28789, 28723,
      28656, 28590, 28522, 28455, 28386, 28318, 28249, 28179, 28109, 28039,
      27968, 27897, 27825, 27753, 27680, 27607, 27534, 27460, 27385, 27311,
      27236, 27160, 27084, 27008, 26931, 26854, 26777, 26699, 26620, 26542,
      26463, 26383, 26303, 26223, 26143, 26062, 25980, 25899, 25817, 25734,
      25652, 25569, 25485, 25401, 25317, 25233, 25148, 25063, 24978, 24892,
      24806, 24719, 24633, 24546, 24458, 24371, 24283, 24195, 24106, 24017,
      23928, 23839, 23749, 23659, 23569, 23479, 23388, 23297, 23206, 23114,
      23022, 22930, 22838, 22745, 22653, 22560, 22466, 22373, 22279, 22185,
      22091, 21997, 21902, 21808, 21713, 21618, 21522, 21427, 21331, 21235,
      21139, 21043, 20946, 20849, 20753, 20656, 20559, 20461, 20364, 20266,
      20169, 20071, 19973, 19874, 19776, 19678, 19579, 19481, 19382, 19283,
      19184, 19085, 18986, 18886, 18787, 18687, 18588, 18488, 18389, 18289,
      18189, 18089, 17989, 17889, 17789, 17688, 17588, 17488, 17388, 17287,
      17187, 17086, 16986, 16886, 16785, 16685, 16584, 16484, 16383, 16282,
      16182, 16081, 15981, 15880, 15780, 15680, 15579, 15479, 15378, 15278,
      15178, 15078, 14977, 14877, 14777, 14677, 14577, 14477, 14377, 14278,
      14178, 14079, 13979, 13880, 13780, 13681, 13582, 13483, 13384, 13285,
      13187, 13088, 12990, 12892, 12793, 12695, 12597, 12500, 12402, 12305,
      12207, 12110, 12013, 11917, 11820, 11723, 11627, 11531, 11435, 11339,
      11244, 11148, 11053, 10958, 10864, 10769, 10675, 10581, 10487, 10393,
      10300, 10206, 10113, 10021, 9928, 9836, 9744, 9652, 9560, 9469,
      9378, 9287, 9197, 9107, 9017, 8927, 8838, 8749, 8660, 8571,
      8483, 8395, 8308, 8220, 8133, 8047, 7960, 7874, 7788, 7703,
      7618, 7533, 7449, 7365, 7281, 7197, 7114, 7032, 6949, 6867,
      6786, 6704, 6623, 6543, 6463, 6383, 6303, 6224, 6146, 6067,
      5989, 5912, 5835, 5758, 5682, 5606, 5530, 5455, 5381, 5306,
      5232, 5159, 5086, 5013, 4941, 4869, 4798, 4727, 4657, 4587,
      4517, 4448, 4380, 4311, 4244, 4176, 4110, 4043, 3977, 3912,
      3847, 3782, 3718, 3655, 3592, 3529, 3467, 3406, 3344, 3284,
      3224, 3164, 3105, 3046, 2988, 2930, 2873, 2817, 2761, 2705,
      2650, 2595, 2541, 2488, 2435, 2382, 2330, 2279, 2228, 2178,
      2128, 2079, 2030, 1982, 1934, 1887, 1840, 1794, 1749, 1704,
      1660, 1616, 1572, 1530, 1488, 1446, 1405, 1365, 1325, 1285,
      1247, 1208, 1171, 1134, 1097, 1061, 1026, 991, 957, 924,
      891, 858, 826, 795, 765, 734, 705, 676, 648, 620,
      593, 566, 541, 515, 490, 466, 443, 420, 398, 376,
      355, 334, 314, 295, 276, 258, 241, 224, 208, 192,
      177, 162, 149, 135, 123, 111, 99, 89, 78, 69,
      60, 52, 44, 37, 30, 24, 19, 15, 11, 7,
      4, 2, 1, 0);

   Window_Hanning_512 : constant Mono_Buffer :=
     (0, 1, 4, 11, 19, 30, 44, 60, 78, 99,
      123, 149, 177, 208, 241, 276, 314, 355, 398, 443,
      490, 541, 593, 648, 705, 765, 826, 891, 957, 1026,
      1097, 1171, 1247, 1325, 1405, 1488, 1572, 1660, 1749, 1840,
      1934, 2030, 2128, 2228, 2330, 2435, 2541, 2650, 2761, 2873,
      2988, 3105, 3224, 3344, 3467, 3592, 3718, 3847, 3977, 4110,
      4244, 4380, 4517, 4657, 4798, 4941, 5086, 5232, 5381, 5530,
      5682, 5835, 5989, 6146, 6303, 6463, 6623, 6786, 6949, 7114,
      7281, 7449, 7618, 7788, 7960, 8133, 8308, 8483, 8660, 8838,
      9017, 9197, 9378, 9560, 9744, 9928, 10113, 10300, 10487, 10675,
      10864, 11053, 11244, 11435, 11627, 11820, 12013, 12207, 12402, 12597,
      12793, 12990, 13187, 13384, 13582, 13780, 13979, 14178, 14377, 14577,
      14777, 14977, 15178, 15378, 15579, 15780, 15981, 16182, 16383, 16584,
      16785, 16986, 17187, 17388, 17588, 17789, 17989, 18189, 18389, 18588,
      18787, 18986, 19184, 19382, 19579, 19776, 19973, 20169, 20364, 20559,
      20753, 20946, 21139, 21331, 21522, 21713, 21902, 22091, 22279, 22466,
      22653, 22838, 23022, 23206, 23388, 23569, 23749, 23928, 24106, 24283,
      24458, 24633, 24806, 24978, 25148, 25317, 25485, 25652, 25817, 25980,
      26143, 26303, 26463, 26620, 26777, 26931, 27084, 27236, 27385, 27534,
      27680, 27825, 27968, 28109, 28249, 28386, 28522, 28656, 28789, 28919,
      29048, 29174, 29299, 29422, 29542, 29661, 29778, 29893, 30005, 30116,
      30225, 30331, 30436, 30538, 30638, 30736, 30832, 30926, 31017, 31106,
      31194, 31278, 31361, 31441, 31519, 31595, 31669, 31740, 31809, 31875,
      31940, 32001, 32061, 32118, 32173, 32225, 32276, 32323, 32368, 32411,
      32452, 32490, 32525, 32558, 32589, 32617, 32643, 32667, 32688, 32706,
      32722, 32736, 32747, 32755, 32762, 32765, 32767, 32765, 32762, 32755,
      32747, 32736, 32722, 32706, 32688, 32667, 32643, 32617, 32589, 32558,
      32525, 32490, 32452, 32411, 32368, 32323, 32276, 32225, 32173, 32118,
      32061, 32001, 31940, 31875, 31809, 31740, 31669, 31595, 31519, 31441,
      31361, 31278, 31194, 31106, 31017, 30926, 30832, 30736, 30638, 30538,
      30436, 30331, 30225, 30116, 30005, 29893, 29778, 29661, 29542, 29422,
      29299, 29174, 29048, 28919, 28789, 28656, 28522, 28386, 28249, 28109,
      27968, 27825, 27680, 27534, 27385, 27236, 27084, 26931, 26777, 26620,
      26463, 26303, 26143, 25980, 25817, 25652, 25485, 25317, 25148, 24978,
      24806, 24633, 24458, 24283, 24106, 23928, 23749, 23569, 23388, 23206,
      23022, 22838, 22653, 22466, 22279, 22091, 21902, 21713, 21522, 21331,
      21139, 20946, 20753, 20559, 20364, 20169, 19973, 19776, 19579, 19382,
      19184, 18986, 18787, 18588, 18389, 18189, 17989, 17789, 17588, 17388,
      17187, 16986, 16785, 16584, 16383, 16182, 15981, 15780, 15579, 15378,
      15178, 14977, 14777, 14577, 14377, 14178, 13979, 13780, 13582, 13384,
      13187, 12990, 12793, 12597, 12402, 12207, 12013, 11820, 11627, 11435,
      11244, 11053, 10864, 10675, 10487, 10300, 10113, 9928, 9744, 9560,
      9378, 9197, 9017, 8838, 8660, 8483, 8308, 8133, 7960, 7788,
      7618, 7449, 7281, 7114, 6949, 6786, 6623, 6463, 6303, 6146,
      5989, 5835, 5682, 5530, 5381, 5232, 5086, 4941, 4798, 4657,
      4517, 4380, 4244, 4110, 3977, 3847, 3718, 3592, 3467, 3344,
      3224, 3105, 2988, 2873, 2761, 2650, 2541, 2435, 2330, 2228,
      2128, 2030, 1934, 1840, 1749, 1660, 1572, 1488, 1405, 1325,
      1247, 1171, 1097, 1026, 957, 891, 826, 765, 705, 648,
      593, 541, 490, 443, 398, 355, 314, 276, 241, 208,
      177, 149, 123, 99, 78, 60, 44, 30, 19, 11,
      4, 1);

   Window_Hanning_256 : constant Mono_Buffer :=
     (0, 4, 19, 44, 78, 123, 177, 241, 314, 398,
      490, 593, 705, 826, 957, 1097, 1247, 1405, 1572, 1749,
      1934, 2128, 2330, 2541, 2761, 2988, 3224, 3467, 3718, 3977,
      4244, 4517, 4798, 5086, 5381, 5682, 5989, 6303, 6623, 6949,
      7281, 7618, 7960, 8308, 8660, 9017, 9378, 9744, 10113, 10487,
      10864, 11244, 11627, 12013, 12402, 12793, 13187, 13582, 13979, 14377,
      14777, 15178, 15579, 15981, 16383, 16785, 17187, 17588, 17989, 18389,
      18787, 19184, 19579, 19973, 20364, 20753, 21139, 21522, 21902, 22279,
      22653, 23022, 23388, 23749, 24106, 24458, 24806, 25148, 25485, 25817,
      26143, 26463, 26777, 27084, 27385, 27680, 27968, 28249, 28522, 28789,
      29048, 29299, 29542, 29778, 30005, 30225, 30436, 30638, 30832, 31017,
      31194, 31361, 31519, 31669, 31809, 31940, 32061, 32173, 32276, 32368,
      32452, 32525, 32589, 32643, 32688, 32722, 32747, 32762, 32767, 32762,
      32747, 32722, 32688, 32643, 32589, 32525, 32452, 32368, 32276, 32173,
      32061, 31940, 31809, 31669, 31519, 31361, 31194, 31017, 30832, 30638,
      30436, 30225, 30005, 29778, 29542, 29299, 29048, 28789, 28522, 28249,
      27968, 27680, 27385, 27084, 26777, 26463, 26143, 25817, 25485, 25148,
      24806, 24458, 24106, 23749, 23388, 23022, 22653, 22279, 21902, 21522,
      21139, 20753, 20364, 19973, 19579, 19184, 18787, 18389, 17989, 17588,
      17187, 16785, 16383, 15981, 15579, 15178, 14777, 14377, 13979, 13582,
      13187, 12793, 12402, 12013, 11627, 11244, 10864, 10487, 10113, 9744,
      9378, 9017, 8660, 8308, 7960, 7618, 7281, 6949, 6623, 6303,
      5989, 5682, 5381, 5086, 4798, 4517, 4244, 3977, 3718, 3467,
      3224, 2988, 2761, 2541, 2330, 2128, 1934, 1749, 1572, 1405,
      1247, 1097, 957, 826, 705, 593, 490, 398, 314, 241,
      177, 123, 78, 44, 19, 4);

   Window_Hanning_128 : constant Mono_Buffer :=
     (0, 19, 78, 177, 314, 490, 705, 957, 1247, 1572,
      1934, 2330, 2761, 3224, 3718, 4244, 4798, 5381, 5989, 6623,
      7281, 7960, 8660, 9378, 10113, 10864, 11627, 12402, 13187, 13979,
      14777, 15579, 16383, 17187, 17989, 18787, 19579, 20364, 21139, 21902,
      22653, 23388, 24106, 24806, 25485, 26143, 26777, 27385, 27968, 28522,
      29048, 29542, 30005, 30436, 30832, 31194, 31519, 31809, 32061, 32276,
      32452, 32589, 32688, 32747, 32767, 32747, 32688, 32589, 32452, 32276,
      32061, 31809, 31519, 31194, 30832, 30436, 30005, 29542, 29048, 28522,
      27968, 27385, 26777, 26143, 25485, 24806, 24106, 23388, 22653, 21902,
      21139, 20364, 19579, 18787, 17989, 17187, 16383, 15579, 14777, 13979,
      13187, 12402, 11627, 10864, 10113, 9378, 8660, 7960, 7281, 6623,
      5989, 5381, 4798, 4244, 3718, 3224, 2761, 2330, 1934, 1572,
      1247, 957, 705, 490, 314, 177, 78, 19);

   Window_Hanning_64 : constant Mono_Buffer :=
     (0, 78, 314, 705, 1247, 1934, 2761, 3718, 4798, 5989,
      7281, 8660, 10113, 11627, 13187, 14777, 16383, 17989, 19579, 21139,
      22653, 24106, 25485, 26777, 27968, 29048, 30005, 30832, 31519, 32061,
      32452, 32688, 32767, 32688, 32452, 32061, 31519, 30832, 30005, 29048,
      27968, 26777, 25485, 24106, 22653, 21139, 19579, 17989, 16383, 14777,
      13187, 11627, 10113, 8660, 7281, 5989, 4798, 3718, 2761, 1934,
      1247, 705, 314, 78);

   Window_Hanning_32 : constant Mono_Buffer :=
     (0, 314, 1247, 2761, 4798, 7281, 10113, 13187, 16383, 19579,
      22653, 25485, 27968, 30005, 31519, 32452, 32767, 32452, 31519, 30005,
      27968, 25485, 22653, 19579, 16383, 13187, 10113, 7281, 4798, 2761,
      1247, 314);

   Window_Hanning_16 : constant Mono_Buffer :=
     (0, 1247, 4798, 10113, 16383, 22653, 27968, 31519, 32767, 31519,
      27968, 22653, 16383, 10113, 4798, 1247);

   ------------------
   -- Apply_Window --
   ------------------

   procedure Apply_Window (Input : in out Mono_Buffer) is
   begin
      case Input'Length is
         when 2048 => Apply_Window (Input, Window_Hanning_2048);
         when 1024 => Apply_Window (Input, Window_Hanning_1024);
         when 512 => Apply_Window (Input, Window_Hanning_512);
         when 256 => Apply_Window (Input, Window_Hanning_256);
         when 128 => Apply_Window (Input, Window_Hanning_128);
         when 64 => Apply_Window (Input, Window_Hanning_64);
         when 32 => Apply_Window (Input, Window_Hanning_32);
         when 16 => Apply_Window (Input, Window_Hanning_16);
         when others => raise Program_Error with "Invalid FFT size";
      end case;
   end Apply_Window;

   --  ----------------------
   --  -- Bit_Reverse_Calc --
   --  ----------------------
   --
   --  function Bit_Reverse_Calc (Array_Num_Bits, Val : U16) return U16 is
   --  begin
   --     case Array_Num_Bits is
   --        when 11 =>
   --           return Bit_Reverse_Calc (5, Shift_Right (Val and 2#11111000000#, 6))
   --                                                or (Val and 2#00000100000#)
   --                or Shift_Left (Bit_Reverse_Calc (5, Val and 2#00000011111#), 6);
   --
   --        when 10 =>
   --           return Bit_Reverse_Calc (5, Shift_Right (Val and 2#1111100000#, 5))
   --                or Shift_Left (Bit_Reverse_Calc (5, Val and 2#0000011111#), 5);
   --
   --        when 9 =>
   --           return Bit_Reverse_Calc (4, Shift_Right (Val and 2#111100000#, 5))
   --                                                or (Val and 2#000010000#)
   --                or Shift_Left (Bit_Reverse_Calc (4, Val and 2#000001111#), 5);
   --
   --        when 8 =>
   --           return Bit_Reverse_Calc (4, Shift_Right (Val and 2#11110000#, 4))
   --                or Shift_Left (Bit_Reverse_Calc (4, Val and 2#00001111#), 4);
   --
   --        when 7 =>
   --           return Bit_Reverse_Calc (3, Shift_Right (Val and 2#1110000#, 4))
   --                                                or (Val and 2#0001000#)
   --                or Shift_Left (Bit_Reverse_Calc (3, Val and 2#0000111#), 4);
   --
   --        when 6 =>
   --           return Bit_Reverse_Calc (3, Shift_Right (Val and 2#111000#, 3))
   --                or Shift_Left (Bit_Reverse_Calc (3, Val and 2#000111#), 3);
   --
   --        when 5 =>
   --           return Bit_Reverse_Calc (2, Shift_Right (Val and 2#11000#, 3))
   --                                                or (Val and 2#00100#)
   --                or Shift_Left (Bit_Reverse_Calc (2, Val and 2#00011#), 3);
   --
   --        when 4 =>
   --           return Bit_Reverse_Calc (2, Shift_Right (Val and 2#1100#, 2))
   --                or Shift_Left (Bit_Reverse_Calc (2, Val and 2#0011#), 2);
   --
   --        when 3 =>
   --           return Shift_Right (Val and 2#100#, 2)
   --                           or (Val and 2#010#)
   --                or Shift_Left (Val and 2#001#, 2);
   --
   --        when 2 =>
   --           return Shift_Right (Val and 2#10#, 1)
   --                or Shift_Left (Val and 2#01#, 1);
   --
   --        when others  =>
   --           return 0;
   --     end case;
   --  end Bit_Reverse_Calc;

   --  procedure Print (X : Mono_Buffer) is
   --  begin
   --     for Elt of X loop
   --        Put (Elt'Img & ", ");
   --     end loop;
   --     New_Line;
   --  end Print;

   ---------
   -- FFT --
   ---------

   function FFT (X : in out Mono_Buffer) return Natural is

      procedure Swap (A, B : in out S16) is
         Tmp : constant S16 := A;
      begin
         A := B;
         B := Tmp;
      end Swap;

      --  indices
      k, n_1, array_num_bits : Natural;
      n_2 : Natural := 1;

      --  temporary buffers that should be used right away.
      Tmp, a, b, c, d : S16;
      --  Will store angles, and recursion values for cosine calculation
      alpha, beta, cj, sj : S16;

      half_size : constant Natural := X'Length / 2;

   begin

      --  Put_Line ("_input_");
      --  Print (X);

      Apply_Window (X);

      case X'Length is
         --  when 2    => array_num_bits := 0;
         --  when 4    => array_num_bits := 1;
         --  when 8    => array_num_bits := 2;
         when 16   => array_num_bits := 3;
         when 32   => array_num_bits := 4;
         when 64   => array_num_bits := 5;
         when 128  => array_num_bits := 6;
         when 256  => array_num_bits := 7;
         when 512  => array_num_bits := 8;
         when 1024 => array_num_bits := 9;
         when 2048 => array_num_bits := 10;
         when others =>
            raise Program_Error;
      end case;

      declare
         Bitrev_Index : Natural := Bitrev_Index_First (X'Length);
         Bitrev_Step  : constant Natural := Bitrev_Index_Step (X'Length);
      begin
         for I in 1 .. half_size - 1 loop
            declare
               J : constant Natural := Bitrev_Table (Bitrev_Index);
            begin
               Bitrev_Index := Bitrev_Index + Bitrev_Step;

               --  Put ("I: ");
               --  IIO.Put (I, array_num_bits + 3, 2);
               --  New_Line;
               --  Put ("J: ");
               --  IIO.Put (J, array_num_bits + 3, 2);
               --  New_Line;
               --  Put_Line ("I:" & I'Img & " J:" & J'Img);

               if I < J then
                  --  Swapping real part
                  Swap (X (X'First + I * 2), X (X'First + J * 2));

                  --  Swapping imaginary part
                  Swap (X (X'First + I * 2 + 1), X (X'First + J * 2 + 1));
               end if;
            end;
         end loop;
      end;

      --  Actual FFT
      for i in 0 .. array_num_bits - 1 loop
         --  n_1 gives the size of the sub-arrays
         n_1 := n_2; -- n_1 = 2^i

         --  n_2 gives the number of steps required to go from one group of
         --  sub-arrays to another
         n_2 := n_2 * 2; -- n_2 = 2^(i+1)

         alpha := Two_Sines_SQ (i);
         beta := Sines (i);
         --  Put_Line ("alpha:" & alpha'Img);
         --  Put_Line ("beta:" & beta'Img);

         --  Those two will store the cosine and sine 2pij/n_2
         cj := FIXED_ONE;
         sj := FIXED_ZERO;

         --  Put ("_step_");
         --  Put (i'Img);
         --  Put_Line ("_pre_scale");
         --  Print (X);

         --  Scale down the array of data before the pass, to ensure no
         --  overflow happens.
         for Elt of X loop
            Elt := Elt / 2;
         end loop;

         --  Put ("_step_");
         --  Put (i'Img);
         --  Put_Line ("");
         --  Put_Line ("n_1:" & n_1'Img);
         --  Put_Line ("n_2:" & n_2'Img);
         --  Print (X);

         --  j will be the index in Xe and Xo
         for j in 0 .. n_1 - 1 loop
            --  We combine the jth elements of each group of sub-arrays
            --  Put_Line ("j:" & j'Img);
            k := j;
            while k < half_size loop
               --  Put_Line ("k:" & k'Img);
               --  Now we calculate the next step of the fft process, i.e.
               declare
                  a_off : constant Natural := k * 2;
                  b_off : constant Natural := k * 2 + 1;
                  c_off : constant Natural := (k + n_1) * 2;
                  d_off : constant Natural := (k + n_1) * 2 + 1;

                  ai : constant Natural := X'First + a_off;
                  bi : constant Natural := X'First + b_off;
                  ci : constant Natural := X'First + c_off;
                  di : constant Natural := X'First + d_off;
               begin
                  --  Put_Line ("----------");
                  --  Put_Line ("cj:" & cj'Img);
                  --  Put_Line ("sj:" & sj'Img);
                  --  Put_Line ("ai:" & a_off'Img);
                  --  Put_Line ("bi:" & b_off'Img);
                  --  Put_Line ("ci:" & c_off'Img);
                  --  Put_Line ("di:" & d_off'Img);

                  a := X (ai);
                  b := X (bi);
                  c := X (ci);
                  d := X (di);

                  X (ai) := Add_Sat (a, (Mul (cj, c) - Mul (sj, d)));
                  X (bi) := Add_Sat (b, (Mul (sj, c) + Mul (cj, d)));
                  X (ci) := Add_Sat (a, (-Mul (cj, c) + Mul (sj, d)));
                  X (di) := Sub_Sat (b, (Mul (sj, c) + Mul (cj, d)));
               end;

               k := k + n_2;
            end loop;
            --  We calculate the next cosine and sine
            Tmp := cj;
            cj := Add_Sat (cj, -Add_Sat (Mul (alpha, cj), Mul (beta, sj)));
            sj := Add_Sat (sj, -Add_Sat (Mul (alpha, sj), -Mul (beta, Tmp)));
         end loop;
      end loop;

      --  Put_Line ("_step_final_pre_scale_");
      --  Print (X);

      --  Scale down the array of data before the pass, to ensure no overflow
      --  happens.
      for Elt of X loop
         Elt := Elt / 2;
      end loop;

      --  Put_Line ("_step_final_");
      --  Print (X);

      --  Building the final FT from its entangled version
      --  Special case n=0
      X (X'First) := Add_Sat (X (X'First), X (X'First + 1));
      X (X'First + 1) := FIXED_ZERO;

      alpha := Two_Sines_SQ (array_num_bits);
      beta := Sines (array_num_bits);
      cj := FIXED_ONE;
      sj := FIXED_ZERO;

      for J in 1 .. half_size / 2 loop
         --  We calculate the cosine and sine before the main calculation here
         --  to compensate for the first step of the loop that was skipped.
         Tmp := cj;
         cj := Add_Sat (cj, -Add_Sat (Mul (alpha, cj), Mul (beta, sj)));
         sj := Add_Sat (sj, -Add_Sat (Mul (alpha, sj), -Mul (beta, Tmp)));

         --  Put_Line ("cj:" & cj'Img & " sj:" & sj'Img);

         declare
            ai : constant Natural := X'First + J * 2;
            bi : constant Natural := X'First + J * 2 + 1;
            ci : constant Natural := X'First + (half_size - J) * 2;
            di : constant Natural := X'First + (half_size - J) * 2 + 1;
            t, k1, k2, k3 : S16;
         begin
            a := X (ai) + X (ci);
            b := X (bi) - X (di);
            c := -X (bi) - X (di);
            d := X (ai) - X (bi);

            k1 := Mul (cj, c + d);
            k2 := Mul (c, Sub_Sat (sj, cj));
            k3 := Mul (d, Add_Sat (cj, sj));
            t := k1 - k3;
            X (ai) := Sub_Sat (a, t) / 2;
            X (ci) := (a + t) / 2;
            t := k1 + k2;
            X (bi) := Sub_Sat (b, t) / 2;
            X (di) := (-b - t) / 2;

            --  a := X (ai);
            --  b := X (bi);
            --  c := X (ci);
            --  d := X (di);
            --
            --  X (ai) := ((a + c)
            --             + (Mul (b, cj) + Mul (a, sj))
            --             + (Mul (d, cj) - Mul (c, sj))) / 2;
            --  X (bi) := ((b - d)
            --             + ((-Mul (a, cj) + Mul (b, sj))
            --               + (Mul (c, cj) + Mul (d, sj)))) / 2;
            --  X (ci) := ((a + c)
            --             + ((-Mul (d, cj) + Mul (c, sj))
            --               - (Mul (b, cj) + Mul (a, sj)))) / 2;
            --  X (di) := ((d - b)
            --             + ((Mul (c, cj) + Mul (d, sj))
            --               + (-Mul (a, cj) + Mul (b, sj)))) / 2;
         end;

      end loop;

      --  Put_Line ("_complex_fft_");
      --  Print (X);

      return 1;
   end FFT;

   ---------------
   -- Amplitude --
   ---------------

   function Amplitude (Freq_Dom  :     Mono_Buffer;
                       Amplitude : out Mono_Buffer)
                       return Natural
   is
      half_size : constant Natural := Freq_Dom'Length / 2;

      i_maxi : Natural := 0;
      a, b : S16;
      Amp, Maxi : S16 := 0;
   begin

      for i in 0 .. half_size - 1 loop
         a := abs Freq_Dom (Freq_Dom'First + 2 * i);
         b := abs Freq_Dom (Freq_Dom'First + 2 * i + 1);

         Amp := S16'Max (Mul (ONE_OVER_SQRT_TWO, Add_Sat (a, b)),
                         S16'Max (a, b));

         --  The "magic" multiplicative constant is greater than 1, so we
         --  have to use a trick: we instead do x + (magic-1)x
         Amp := Add_Sat (Amp, Mul (MODULUS_MAGIC, Amp));

         Amplitude (Amplitude'First + i) := Amp;

         --  Put_Line ("Bin:" & Integer (Amplitude'First + i)'Img &
         --              " Amp:" & Amp'Img);

         --  Oh yeah, and also look for the maximum
         if Amp > Maxi then
            Maxi := Amp;
            i_maxi := i;
         end if;
      end loop;

      --  Put_Line ("_after_modulus_");
      --  Print (Amplitude);

      return Amplitude'First + i_maxi;
   end Amplitude;

   -----------------
   -- Process_FFT --
   -----------------

   procedure Process_FFT (This : in out Instance) is
      Ptr : Natural := This.Circular_Ptr;

      Time_Domain : Mono_Buffer (1 .. This.Window_Size);
      Unused : Natural;
      Unused_F : Float;
   begin
      --  Unwrap the circular buffer into the time-domain window
      for Index in reverse Time_Domain'Range loop
         if Ptr = This.Input_Circular'First then
            Ptr := This.Input_Circular'Last;
         else
            Ptr := Ptr - 1;
         end if;

         Time_Domain (Index) := This.Input_Circular (Ptr);
      end loop;

      Unused := FFT (Time_Domain);
      This.Hop.Frequency_Domain := Time_Domain;
      This.Max_Bin := Amplitude (This.Hop.Frequency_Domain,
                                 This.Hop.Amplitude);
   end Process_FFT;

   ----------------
   -- Push_Frame --
   ----------------

   function Push_Frame (This    : in out Instance;
                        Frame   :        S16)
                        return Boolean
   is
   begin
      This.Input_Circular (This.Circular_Ptr) := Frame;
      if This.Circular_Ptr = This.Input_Circular'Last then
         This.Circular_Ptr := This.Input_Circular'First;
      else
         This.Circular_Ptr := This.Circular_Ptr + 1;
      end if;

      This.Hop_Counter := This.Hop_Counter + 1;
      if This.Hop_Counter >= This.Hop_Size then
         Process_FFT (This);
         This.Hop_Counter := 0;
         return True;
      end if;

      return False;
   end Push_Frame;

   ----------------
   -- Push_Frame --
   ----------------

   procedure Push_Frame (This  : in out Instance;
                         Frame :        S16)
   is
      Unused : Boolean;
   begin
      Unused := This.Push_Frame (Frame);
   end Push_Frame;

   ---------
   -- Rel --
   ---------

   function Rel (This : Instance; Bin : Natural) return S16 is
   begin
      return This.Hop.Frequency_Domain (Bin);
   end Rel;

   ---------
   -- Img --
   ---------

   function Img (This : Instance; Bin : Natural) return S16 is
   begin
      return This.Hop.Frequency_Domain (Bin);
   end Img;

   ---------
   -- Amp --
   ---------

   function Amp (This : Instance; Bin : Natural) return S16 is
   begin
      return This.Hop.Amplitude (Bin);
   end Amp;

   -----------------
   -- Max_Amp_Bin --
   -----------------

   function Max_Amp_Bin (This : Instance) return Positive is
   begin
      return This.Max_Bin;
   end Max_Amp_Bin;

   --------------------------
   -- Bin_Center_Frequency --
   --------------------------

   function Bin_Center_Frequency (This : in out Instance;
                                  Bin  :        Natural)
                                  return Float
   is
   begin
      if This.Center_Frequency (Bin) = 0.0 then
         This.Center_Frequency (Bin) :=
           Float (Bin - 1) * Resources.SAMPLE_RATE_REAL / Float (This.Window_Size);
      end if;

      return This.Center_Frequency (Bin);
   end Bin_Center_Frequency;

   ---------------------------
   -- Copy_Frequency_Domain --
   ---------------------------

   function Copy_Frequency_Domain (This : Instance) return Mono_Buffer
   is (This.Hop.Frequency_Domain);

end Tresses.FFT.Fixed;
